# General test configuration options

# Python files will be copied from this directory
asset_path: ../../assets/python/ml/

# Specific assets that are needed for the test (such as a pre-rendered settings.py)
fixtures:
  path: "fixtures"
  settings: settings.py
  regression:
    training_set_name: regression_training_data.csv
    predict_set_name: regression_predict_data.csv
  classification:
    training_set_name: classification_training_data.csv
    predict_set_name: classification_predict_data.csv
  clustering:
    training_set_name: clustering_blobs.csv
    predict_set_name: clustering_blobs.csv

# Specific files and directories to remove during test cleanup
files_to_remove:
  - settings.py
  - .job_context

# Specific extensions to remove during test cleanup
extensions_to_remove:
  - .csv
  - .png
  - .pyi

# ============================================================================
# Shorthand definitions for the various flavors we've made so far. Used in the "Test Cases" document below.
# Naming convention is <some_prefix>_<short_string_for_file>
#
# Prefixes below:
# IO - I/O
# PRE - Pre-Processing
# REG - Regression
# CLS - Classification
# UNS - Unsupervised
# POS - Post-Processing
#
# The short strings for files are generally based on their name. For example:
# ttSplit = train_test_split
# minMaxScale = min_max_scaler
# kernelRidge = kernelized_ridge_regression
# gradBoostTree = gradboosted_trees_regression
unit_shortnames:
  # I/O Units
  IO_readCSV: "pyml:data_input:read_csv:pandas.pyi"
  IO_ttSplit: "pyml:data_input:train_test_split:sklearn.pyi"

  # Pre-Processors
  PRE_minMaxScale: "pyml:pre_processing:min_max_scaler:sklearn.pyi"
  PRE_dropDupes: "pyml:pre_processing:remove_duplicates:pandas.pyi"
  PRE_dropMissing: "pyml:pre_processing:remove_missing:pandas.pyi"
  PRE_standScale: "pyml:pre_processing:standardization:sklearn.pyi"

  # Regressors
  REG_adaBoostTree: "pyml:model:adaboosted_trees_regression:sklearn.pyi"
  REG_bagTree: "pyml:model:bagged_trees_regression:sklearn.pyi"
  REG_gradBoostTree: "pyml:model:gradboosted_trees_regression:sklearn.pyi"
  REG_kernelRidge: "pyml:model:kernel_ridge_regression:sklearn.pyi"
  REG_lasso: "pyml:model:lasso_regression:sklearn.pyi"
  REG_mlp: "pyml:model:multilayer_perceptron:sklearn.pyi"
  REG_randomForest: "pyml:model:random_forest_regression:sklearn.pyi"
  REG_RidgeReg: "pyml:model:ridge_regression:sklearn.pyi"

  # Classifiers
  CLS_randomForest: "pyml:model:random_forest_classification:sklearn.pyi"

  # Unsupervised Learners
  UNS_kMeans: "pyml:model:k_means_clustering:sklearn.pyi"

  # Post-Processors
  POS_plotParity: "pyml:post_processing:parity_plot:matplotlib.pyi"
  POS_plotClusters: "pyml:post_processing:pca_2d_clusters:matplotlib.pyi"
  POS_plotROC: "pyml:post_processing:roc_curve:sklearn.pyi"

# ============================================================================
# Test cases
# Each key represents a different test name
# Each value underneath the key represents a shorthand for a file (see above)
# Scripts wil be executed in the exact sequence that they are given in

tests:
  # Regression

  Reg_ReadCSV_MinMax_RidgeReg_Parity:
    category: regression
    units_to_run:
      - IO_readCSV
      - PRE_minMaxScale
      - REG_RidgeReg
      - POS_plotParity


  Reg_ReadCSV_MinMax_RemoveDupes_RandomForest_Parity:
    category: regression
    units_to_run:
      - IO_readCSV
      - PRE_minMaxScale
      - PRE_dropDupes
      - REG_randomForest
      - POS_plotParity

  Reg_ReadCSV_MinMax_RemoveMissing_MLP_Parity:
    category: regression
    units_to_run:
      - IO_readCSV
      - PRE_minMaxScale
      - PRE_dropMissing
      - REG_mlp
      - POS_plotParity

  Reg_ReadCSV_Standardize_LASSO_Parity:
    category: regression
    units_to_run:
      - IO_readCSV
      - PRE_standScale
      - REG_lasso
      - POS_plotParity

  Reg_ReadCSV_TrainTest_Standardize_KernelizedRidge_Parity:
    category: regression
    units_to_run:
      - IO_readCSV
      - IO_ttSplit
      - PRE_standScale
      - REG_kernelRidge
      - POS_plotParity

  Reg_ReadCSV_Standardize_GradientBoostedTrees_Parity:
    category: regression
    units_to_run:
      - IO_readCSV
      - PRE_standScale
      - REG_gradBoostTree
      - POS_plotParity

  Reg_ReadCSV_TrainTest_MinMax_BaggedTrees_Parity:
    category: regression
    units_to_run:
      - IO_readCSV
      - IO_ttSplit
      - PRE_minMaxScale
      - REG_bagTree
      - POS_plotParity

  Reg_ReadCSV_MinMax_AdaptiveBoostedTrees_Parity:
    category: regression
    units_to_run:
      - IO_readCSV
      - PRE_minMaxScale
      - REG_adaBoostTree
      - POS_plotParity

  Reg_ReadCSV_TrainTest_MinMax_MLP_Parity:
    category: regression
    units_to_run:
      - IO_readCSV
      - IO_ttSplit
      - PRE_minMaxScale
      - REG_mlp
      - POS_plotParity

  # Classification
  Cls_ReadCSV_TrainTest_MinMax_RF_ROC:
    category: classification
    units_to_run:
      - IO_readCSV
      - IO_ttSplit
      - PRE_minMaxScale
      - CLS_randomForest
      - POS_plotROC

  Cls_ReadCSV_DropDupes_MinMax_RF_ROC:
    category: classification
    units_to_run:
      - IO_readCSV
      - PRE_dropDupes
      - PRE_minMaxScale
      - CLS_randomForest
      - POS_plotROC

  Cls_ReadCSV_StandScale_RF_ROC:
    category: classification
    units_to_run:
      - IO_readCSV
      - PRE_standScale
      - CLS_randomForest
      - POS_plotROC

  # Clustering
  Uns_ReadCSV_TrainTest_MinMax_KMeans_ClusterPlot:
    category: clustering
    units_to_run:
      - IO_readCSV
      - IO_ttSplit
      - PRE_minMaxScale
      - UNS_kMeans
      - POS_plotClusters

  Uns_ReadCSV_DropDupes_MinMax_kMeans_ClusterPlot:
    category: clustering
    units_to_run:
      - IO_readCSV
      - PRE_dropDupes
      - PRE_minMaxScale
      - UNS_kMeans
      - POS_plotClusters

  Uns_ReadCSV_StandScale_kMeans_ROC_ClusterPlot:
    category: clustering
    units_to_run:
      - IO_readCSV
      - PRE_standScale
      - UNS_kMeans
      - POS_plotClusters
